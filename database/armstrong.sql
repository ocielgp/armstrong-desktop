-- MySQL Script generated by MySQL Workbench
-- Tue Jul  5 11:39:19 2022
-- Model: New Model    Version: 1.0
-- MySQL Workbench Forward Engineering

SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0;
SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0;
SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION';

-- -----------------------------------------------------
-- Schema armstrong
-- -----------------------------------------------------

-- -----------------------------------------------------
-- Schema armstrong
-- -----------------------------------------------------
CREATE SCHEMA IF NOT EXISTS `armstrong` DEFAULT CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci ;
USE `armstrong` ;

-- -----------------------------------------------------
-- Table `armstrong`.`GYMS`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `armstrong`.`GYMS` (
  `idGym` TINYINT UNSIGNED NOT NULL AUTO_INCREMENT,
  `name` VARCHAR(45) NOT NULL,
  `address` VARCHAR(80) NOT NULL,
  `createdAt` DATETIME NOT NULL DEFAULT NOW(),
  `createdBy` MEDIUMINT UNSIGNED NOT NULL DEFAULT 1,
  `flag` TINYINT NOT NULL DEFAULT 1,
  PRIMARY KEY (`idGym`, `createdBy`),
  INDEX `fk_GYMS_MEMBERS1_idx` (`createdBy` ASC) VISIBLE,
  CONSTRAINT `fk_GYMS_MEMBERS1`
    FOREIGN KEY (`createdBy`)
    REFERENCES `armstrong`.`MEMBERS` (`idMember`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `armstrong`.`MEMBERS`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `armstrong`.`MEMBERS` (
  `idMember` MEDIUMINT UNSIGNED NOT NULL AUTO_INCREMENT,
  `name` VARCHAR(30) NOT NULL,
  `lastName` VARCHAR(30) NOT NULL,
  `gender` VARCHAR(6) NOT NULL,
  `notes` VARCHAR(80) NULL,
  `access` TINYINT NOT NULL DEFAULT 1,
  `idGym` TINYINT UNSIGNED NOT NULL,
  `createdAt` DATETIME NOT NULL DEFAULT NOW(),
  `createdBy` MEDIUMINT UNSIGNED NOT NULL DEFAULT 1,
  `updatedAt` DATETIME NULL,
  `updatedBy` MEDIUMINT UNSIGNED NULL,
  `flag` TINYINT NOT NULL DEFAULT 1,
  PRIMARY KEY (`idMember`, `idGym`),
  INDEX `fk_MEMBERS_GYMS1_idx` (`idGym` ASC) VISIBLE,
  INDEX `fk_MEMBERS_MEMBERS1_idx` (`updatedBy` ASC) VISIBLE,
  CONSTRAINT `fk_MEMBERS_GYMS1`
    FOREIGN KEY (`idGym`)
    REFERENCES `armstrong`.`GYMS` (`idGym`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_MEMBERS_MEMBERS1`
    FOREIGN KEY (`updatedBy`)
    REFERENCES `armstrong`.`MEMBERS` (`idMember`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `armstrong`.`MEMBERS_FINGERPRINTS`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `armstrong`.`MEMBERS_FINGERPRINTS` (
  `idFingerprint` MEDIUMINT UNSIGNED NOT NULL AUTO_INCREMENT,
  `fingerprint` BLOB NOT NULL,
  `idMember` MEDIUMINT UNSIGNED NOT NULL,
  PRIMARY KEY (`idFingerprint`, `idMember`),
  INDEX `fk_MEMBERS_FINGERPRINTS_MEMBERS1_idx` (`idMember` ASC) VISIBLE,
  CONSTRAINT `fk_MEMBERS_FINGERPRINTS_MEMBERS1`
    FOREIGN KEY (`idMember`)
    REFERENCES `armstrong`.`MEMBERS` (`idMember`)
    ON DELETE CASCADE
    ON UPDATE CASCADE)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `armstrong`.`MEMBERS_PHOTOS`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `armstrong`.`MEMBERS_PHOTOS` (
  `idPhoto` MEDIUMINT UNSIGNED NOT NULL AUTO_INCREMENT,
  `photo` LONGBLOB NULL,
  `idMember` MEDIUMINT UNSIGNED NOT NULL,
  PRIMARY KEY (`idPhoto`, `idMember`),
  INDEX `fk_MEMBERS_PHOTOS_MEMBERS1_idx` (`idMember` ASC) VISIBLE,
  CONSTRAINT `fk_MEMBERS_PHOTOS_MEMBERS1`
    FOREIGN KEY (`idMember`)
    REFERENCES `armstrong`.`MEMBERS` (`idMember`)
    ON DELETE CASCADE
    ON UPDATE CASCADE)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `armstrong`.`CHECK_IN`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `armstrong`.`CHECK_IN` (
  `createdAt` DATETIME NOT NULL DEFAULT NOW(),
  `createdBy` MEDIUMINT UNSIGNED NOT NULL,
  `idMember` MEDIUMINT UNSIGNED NOT NULL,
  `idGym` TINYINT UNSIGNED NOT NULL,
  PRIMARY KEY (`createdAt`, `createdBy`, `idGym`, `idMember`),
  INDEX `fk_CHECK_IN_MEMBERS1_idx` (`idMember` ASC) VISIBLE,
  INDEX `fk_CHECK_IN_MEMBERS2_idx` (`createdBy` ASC) VISIBLE,
  INDEX `fk_CHECK_IN_GYMS1_idx` (`idGym` ASC) VISIBLE,
  CONSTRAINT `fk_CHECK_IN_MEMBERS1`
    FOREIGN KEY (`idMember`)
    REFERENCES `armstrong`.`MEMBERS` (`idMember`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_CHECK_IN_MEMBERS2`
    FOREIGN KEY (`createdBy`)
    REFERENCES `armstrong`.`MEMBERS` (`idMember`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_CHECK_IN_GYMS1`
    FOREIGN KEY (`idGym`)
    REFERENCES `armstrong`.`GYMS` (`idGym`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `armstrong`.`MEMBERSHIPS`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `armstrong`.`MEMBERSHIPS` (
  `idMembership` SMALLINT UNSIGNED NOT NULL AUTO_INCREMENT,
  `name` VARCHAR(60) NOT NULL,
  `price` DECIMAL(9,2) NOT NULL,
  `monthly` TINYINT NOT NULL DEFAULT 1,
  `createdAt` DATETIME NOT NULL DEFAULT NOW(),
  `createdBy` MEDIUMINT UNSIGNED NOT NULL,
  `updatedAt` DATETIME NULL,
  `updatedBy` MEDIUMINT UNSIGNED NULL,
  `flag` TINYINT NOT NULL DEFAULT 1,
  PRIMARY KEY (`idMembership`),
  INDEX `fk_MEMBERSHIPS_MEMBERS1_idx` (`createdBy` ASC) VISIBLE,
  INDEX `fk_MEMBERSHIPS_MEMBERS2_idx` (`updatedBy` ASC) VISIBLE,
  CONSTRAINT `fk_MEMBERSHIPS_MEMBERS1`
    FOREIGN KEY (`createdBy`)
    REFERENCES `armstrong`.`MEMBERS` (`idMember`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_MEMBERSHIPS_MEMBERS2`
    FOREIGN KEY (`updatedBy`)
    REFERENCES `armstrong`.`MEMBERS` (`idMember`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `armstrong`.`ADMINS_ROLES`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `armstrong`.`ADMINS_ROLES` (
  `idRole` TINYINT UNSIGNED NOT NULL AUTO_INCREMENT,
  `name` VARCHAR(45) NOT NULL,
  `createdAt` DATETIME NOT NULL DEFAULT NOW(),
  `createdBy` MEDIUMINT UNSIGNED NOT NULL DEFAULT 1,
  `updatedAt` DATETIME NULL,
  `updatedBy` MEDIUMINT UNSIGNED NULL,
  `flag` TINYINT NOT NULL DEFAULT 1,
  PRIMARY KEY (`idRole`, `createdBy`),
  INDEX `fk_ADMINS_ROLES_MEMBERS1_idx` (`createdBy` ASC) VISIBLE,
  INDEX `fk_ADMINS_ROLES_MEMBERS2_idx` (`updatedBy` ASC) VISIBLE,
  CONSTRAINT `fk_ADMINS_ROLES_MEMBERS1`
    FOREIGN KEY (`createdBy`)
    REFERENCES `armstrong`.`MEMBERS` (`idMember`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_ADMINS_ROLES_MEMBERS2`
    FOREIGN KEY (`updatedBy`)
    REFERENCES `armstrong`.`MEMBERS` (`idMember`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `armstrong`.`PAYMENTS_MEMBERSHIPS`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `armstrong`.`PAYMENTS_MEMBERSHIPS` (
  `idPaymentMembership` MEDIUMINT UNSIGNED NOT NULL AUTO_INCREMENT,
  `months` TINYINT UNSIGNED NOT NULL,
  `price` DECIMAL(9,2) NOT NULL,
  `startDateTime` DATETIME NOT NULL DEFAULT NOW(),
  `endDateTime` DATETIME NOT NULL,
  `firstMembership` TINYINT UNSIGNED NOT NULL DEFAULT 1,
  `idGym` TINYINT UNSIGNED NOT NULL,
  `idMember` MEDIUMINT UNSIGNED NOT NULL,
  `idMembership` SMALLINT UNSIGNED NOT NULL,
  `createdAt` DATETIME NOT NULL DEFAULT NOW(),
  `createdBy` MEDIUMINT UNSIGNED NOT NULL,
  `updatedAt` DATETIME NULL,
  `updatedBy` MEDIUMINT UNSIGNED NULL,
  `flag` TINYINT UNSIGNED NOT NULL DEFAULT 1,
  PRIMARY KEY (`idPaymentMembership`, `idGym`, `idMembership`, `idMember`, `createdBy`),
  INDEX `fk_PAYMENTS_MEMBERSHIPS_MEMBERS1_idx` (`idMember` ASC) VISIBLE,
  INDEX `fk_PAYMENTS_MEMBERSHIPS_GYMS1_idx` (`idGym` ASC) VISIBLE,
  INDEX `fk_PAYMENTS_MEMBERSHIPS_MEMBERSHIPS1_idx` (`idMembership` ASC) VISIBLE,
  INDEX `fk_PAYMENTS_MEMBERSHIPS_MEMBERS2_idx` (`createdBy` ASC) VISIBLE,
  INDEX `fk_PAYMENTS_MEMBERSHIPS_MEMBERS3_idx` (`updatedBy` ASC) VISIBLE,
  CONSTRAINT `fk_PAYMENTS_MEMBERSHIPS_MEMBERS1`
    FOREIGN KEY (`idMember`)
    REFERENCES `armstrong`.`MEMBERS` (`idMember`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_PAYMENTS_MEMBERSHIPS_GYMS1`
    FOREIGN KEY (`idGym`)
    REFERENCES `armstrong`.`GYMS` (`idGym`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_PAYMENTS_MEMBERSHIPS_MEMBERSHIPS1`
    FOREIGN KEY (`idMembership`)
    REFERENCES `armstrong`.`MEMBERSHIPS` (`idMembership`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_PAYMENTS_MEMBERSHIPS_MEMBERS2`
    FOREIGN KEY (`createdBy`)
    REFERENCES `armstrong`.`MEMBERS` (`idMember`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_PAYMENTS_MEMBERSHIPS_MEMBERS3`
    FOREIGN KEY (`updatedBy`)
    REFERENCES `armstrong`.`MEMBERS` (`idMember`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `armstrong`.`DEBTS`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `armstrong`.`DEBTS` (
  `idDebt` MEDIUMINT UNSIGNED NOT NULL AUTO_INCREMENT,
  `owe` DECIMAL(9,2) NOT NULL,
  `paidOut` DECIMAL(9,2) ZEROFILL NOT NULL,
  `debtStatus` TINYINT GENERATED ALWAYS AS (owe > 0) VIRTUAL,
  `idMember` MEDIUMINT UNSIGNED NOT NULL,
  `createdAt` DATETIME NOT NULL DEFAULT NOW(),
  `createdBy` MEDIUMINT UNSIGNED NOT NULL,
  `updatedAt` DATETIME NULL,
  `updatedBy` MEDIUMINT UNSIGNED NULL,
  `flag` TINYINT NOT NULL DEFAULT 1,
  PRIMARY KEY (`idDebt`, `createdBy`, `idMember`),
  INDEX `fk_DEBTS_MEMBERSHIPS_MEMBERS1_idx` (`updatedBy` ASC) VISIBLE,
  INDEX `fk_DEBTS_MEMBERS1_idx` (`idMember` ASC) VISIBLE,
  INDEX `fk_DEBTS_MEMBERS2_idx` (`createdBy` ASC) VISIBLE,
  CONSTRAINT `fk_DEBTS_MEMBERSHIPS_MEMBERS1`
    FOREIGN KEY (`updatedBy`)
    REFERENCES `armstrong`.`MEMBERS` (`idMember`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_DEBTS_MEMBERS1`
    FOREIGN KEY (`idMember`)
    REFERENCES `armstrong`.`MEMBERS` (`idMember`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_DEBTS_MEMBERS2`
    FOREIGN KEY (`createdBy`)
    REFERENCES `armstrong`.`MEMBERS` (`idMember`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `armstrong`.`ADMINS`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `armstrong`.`ADMINS` (
  `idAdmin` MEDIUMINT UNSIGNED NOT NULL,
  `username` VARCHAR(45) NOT NULL,
  `password` VARCHAR(64) NOT NULL,
  `idRole` TINYINT UNSIGNED NOT NULL,
  `createdAt` DATETIME NOT NULL DEFAULT NOW(),
  `createdBy` MEDIUMINT UNSIGNED NOT NULL DEFAULT 1,
  `updatedAt` DATETIME NULL,
  `updatedBy` MEDIUMINT UNSIGNED NULL,
  `flag` TINYINT NOT NULL DEFAULT 1,
  INDEX `fk_STAFF_MEMBERS_MEMBERS1_idx` (`idAdmin` ASC) VISIBLE,
  INDEX `fk_ADMINS_ADMINS_ROLES1_idx` (`idRole` ASC) VISIBLE,
  INDEX `fk_ADMINS_MEMBERS1_idx` (`createdBy` ASC) VISIBLE,
  INDEX `fk_ADMINS_MEMBERS2_idx` (`updatedBy` ASC) INVISIBLE,
  PRIMARY KEY (`idAdmin`, `idRole`),
  UNIQUE INDEX `username_UNIQUE` (`username` ASC) VISIBLE,
  CONSTRAINT `fk_STAFF_MEMBERS_MEMBERS1`
    FOREIGN KEY (`idAdmin`)
    REFERENCES `armstrong`.`MEMBERS` (`idMember`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_ADMINS_ADMINS_ROLES1`
    FOREIGN KEY (`idRole`)
    REFERENCES `armstrong`.`ADMINS_ROLES` (`idRole`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_ADMINS_MEMBERS1`
    FOREIGN KEY (`createdBy`)
    REFERENCES `armstrong`.`MEMBERS` (`idMember`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_ADMINS_MEMBERS2`
    FOREIGN KEY (`updatedBy`)
    REFERENCES `armstrong`.`MEMBERS` (`idMember`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `armstrong`.`PAYMENTS_VISITS`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `armstrong`.`PAYMENTS_VISITS` (
  `idPaymentVisit` MEDIUMINT UNSIGNED NOT NULL AUTO_INCREMENT,
  `price` DECIMAL(9,2) NOT NULL,
  `idGym` TINYINT UNSIGNED NOT NULL,
  `idMembership` SMALLINT UNSIGNED NOT NULL,
  `createdAt` DATETIME NOT NULL DEFAULT NOW(),
  `createdBy` MEDIUMINT UNSIGNED NOT NULL,
  `updatedAt` DATETIME NULL,
  `updatedBy` MEDIUMINT UNSIGNED NULL,
  `flag` TINYINT NOT NULL DEFAULT 1,
  PRIMARY KEY (`idPaymentVisit`, `idMembership`, `createdBy`, `idGym`),
  INDEX `fk_PAYMENTS_VISITORS_GYMS1_idx` (`idGym` ASC) VISIBLE,
  INDEX `fk_PAYMENTS_VISITORS_MEMBERS1_idx` (`createdBy` ASC) VISIBLE,
  INDEX `fk_PAYMENTS_VISITS_MEMBERSHIPS1_idx` (`idMembership` ASC) VISIBLE,
  INDEX `fk_PAYMENTS_VISITS_MEMBERS1_idx` (`updatedBy` ASC) VISIBLE,
  CONSTRAINT `fk_PAYMENTS_VISITORS_GYMS1`
    FOREIGN KEY (`idGym`)
    REFERENCES `armstrong`.`GYMS` (`idGym`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_PAYMENTS_VISITORS_MEMBERS1`
    FOREIGN KEY (`createdBy`)
    REFERENCES `armstrong`.`MEMBERS` (`idMember`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_PAYMENTS_VISITS_MEMBERSHIPS1`
    FOREIGN KEY (`idMembership`)
    REFERENCES `armstrong`.`MEMBERSHIPS` (`idMembership`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_PAYMENTS_VISITS_MEMBERS1`
    FOREIGN KEY (`updatedBy`)
    REFERENCES `armstrong`.`MEMBERS` (`idMember`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `armstrong`.`MEMBERSHIPS_AUDIT`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `armstrong`.`MEMBERSHIPS_AUDIT` (
  `idAudit` MEDIUMINT UNSIGNED NOT NULL AUTO_INCREMENT,
  `action` CHAR(6) NOT NULL,
  `updatedAt` DATETIME NOT NULL,
  `updatedBy` MEDIUMINT UNSIGNED NOT NULL,
  `idMembership` SMALLINT UNSIGNED NOT NULL,
  `name` VARCHAR(60) NOT NULL,
  `price` DECIMAL(9,2) NOT NULL,
  `monthly` TINYINT NOT NULL,
  PRIMARY KEY (`idAudit`, `idMembership`, `updatedBy`),
  INDEX `fk_MEMBERSHIPS_AUDIT_MEMBERSHIPS1_idx` (`idMembership` ASC) VISIBLE,
  INDEX `fk_MEMBERSHIPS_AUDIT_MEMBERS1_idx` (`updatedBy` ASC) VISIBLE,
  CONSTRAINT `fk_MEMBERSHIPS_AUDIT_MEMBERSHIPS1`
    FOREIGN KEY (`idMembership`)
    REFERENCES `armstrong`.`MEMBERSHIPS` (`idMembership`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_MEMBERSHIPS_AUDIT_MEMBERS1`
    FOREIGN KEY (`updatedBy`)
    REFERENCES `armstrong`.`MEMBERS` (`idMember`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `armstrong`.`MEMBERS_AUDIT`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `armstrong`.`MEMBERS_AUDIT` (
  `idAudit` INT UNSIGNED NOT NULL AUTO_INCREMENT,
  `action` CHAR(6) NOT NULL,
  `updatedAt` DATETIME NOT NULL,
  `updatedBy` MEDIUMINT UNSIGNED NOT NULL,
  `idMember` MEDIUMINT UNSIGNED NOT NULL,
  `name` VARCHAR(30) NOT NULL,
  `lastName` VARCHAR(30) NOT NULL,
  `gender` VARCHAR(6) NOT NULL,
  `notes` VARCHAR(80) NULL,
  `access` TINYINT NOT NULL DEFAULT 1,
  `idGym` TINYINT UNSIGNED NOT NULL,
  INDEX `fk_MEMBERS_AUDIT_MEMBERS1_idx` (`idMember` ASC) VISIBLE,
  PRIMARY KEY (`idAudit`, `idGym`, `idMember`, `updatedBy`),
  INDEX `fk_MEMBERS_AUDIT_MEMBERS2_idx` (`updatedBy` ASC) VISIBLE,
  INDEX `fk_MEMBERS_AUDIT_GYMS1_idx` (`idGym` ASC) VISIBLE,
  CONSTRAINT `fk_MEMBERS_AUDIT_MEMBERS1`
    FOREIGN KEY (`idMember`)
    REFERENCES `armstrong`.`MEMBERS` (`idMember`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_MEMBERS_AUDIT_MEMBERS2`
    FOREIGN KEY (`updatedBy`)
    REFERENCES `armstrong`.`MEMBERS` (`idMember`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_MEMBERS_AUDIT_GYMS1`
    FOREIGN KEY (`idGym`)
    REFERENCES `armstrong`.`GYMS` (`idGym`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `armstrong`.`PAYMENTS_MEMBERSHIPS_AUDIT`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `armstrong`.`PAYMENTS_MEMBERSHIPS_AUDIT` (
  `idAudit` INT UNSIGNED NOT NULL AUTO_INCREMENT,
  `action` CHAR(6) NOT NULL,
  `updatedAt` DATETIME NOT NULL,
  `updatedBy` MEDIUMINT UNSIGNED NOT NULL,
  `idPaymentMembership` MEDIUMINT UNSIGNED NOT NULL,
  `months` TINYINT NOT NULL,
  `price` DECIMAL(9,2) NOT NULL,
  `startDateTime` DATETIME NOT NULL,
  `endDateTime` DATETIME NOT NULL,
  `firstMembership` TINYINT UNSIGNED NOT NULL,
  `idGym` TINYINT UNSIGNED NOT NULL,
  `idMember` MEDIUMINT UNSIGNED NOT NULL,
  `idMembership` SMALLINT UNSIGNED NOT NULL,
  PRIMARY KEY (`idAudit`, `idGym`, `idPaymentMembership`, `idMember`, `updatedBy`, `idMembership`),
  INDEX `fk_PAYMENTS_MEMBERSHIPS_AUDIT_PAYMENTS_MEMBERSHIPS1_idx` (`idPaymentMembership` ASC) VISIBLE,
  INDEX `fk_PAYMENTS_MEMBERSHIPS_AUDIT_MEMBERS1_idx` (`updatedBy` ASC) VISIBLE,
  INDEX `fk_PAYMENTS_MEMBERSHIPS_AUDIT_GYMS1_idx` (`idGym` ASC) VISIBLE,
  INDEX `fk_PAYMENTS_MEMBERSHIPS_AUDIT_MEMBERSHIPS1_idx` (`idMembership` ASC) VISIBLE,
  INDEX `fk_PAYMENTS_MEMBERSHIPS_AUDIT_MEMBERS2_idx` (`idMember` ASC) VISIBLE,
  CONSTRAINT `fk_PAYMENTS_MEMBERSHIPS_AUDIT_PAYMENTS_MEMBERSHIPS1`
    FOREIGN KEY (`idPaymentMembership`)
    REFERENCES `armstrong`.`PAYMENTS_MEMBERSHIPS` (`idPaymentMembership`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_PAYMENTS_MEMBERSHIPS_AUDIT_MEMBERS1`
    FOREIGN KEY (`updatedBy`)
    REFERENCES `armstrong`.`MEMBERS` (`idMember`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_PAYMENTS_MEMBERSHIPS_AUDIT_GYMS1`
    FOREIGN KEY (`idGym`)
    REFERENCES `armstrong`.`GYMS` (`idGym`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_PAYMENTS_MEMBERSHIPS_AUDIT_MEMBERSHIPS1`
    FOREIGN KEY (`idMembership`)
    REFERENCES `armstrong`.`MEMBERSHIPS` (`idMembership`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_PAYMENTS_MEMBERSHIPS_AUDIT_MEMBERS2`
    FOREIGN KEY (`idMember`)
    REFERENCES `armstrong`.`MEMBERS` (`idMember`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `armstrong`.`ADMINS_AUDIT`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `armstrong`.`ADMINS_AUDIT` (
  `idAudit` INT UNSIGNED NOT NULL AUTO_INCREMENT,
  `action` CHAR(6) NOT NULL,
  `updatedAt` DATETIME NOT NULL,
  `updatedBy` MEDIUMINT UNSIGNED NOT NULL,
  `idAdmin` SMALLINT UNSIGNED NOT NULL,
  `username` VARCHAR(45) NOT NULL,
  `password` VARCHAR(64) NOT NULL,
  `idRole` TINYINT UNSIGNED NOT NULL,
  PRIMARY KEY (`idAudit`, `idAdmin`, `idRole`, `updatedBy`),
  INDEX `fk_ADMINS_AUDIT_MEMBERS1_idx` (`updatedBy` ASC) VISIBLE,
  INDEX `fk_ADMINS_AUDIT_ADMINS_ROLES1_idx` (`idRole` ASC) VISIBLE,
  CONSTRAINT `fk_ADMINS_AUDIT_MEMBERS1`
    FOREIGN KEY (`updatedBy`)
    REFERENCES `armstrong`.`MEMBERS` (`idMember`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_ADMINS_AUDIT_ADMINS_ROLES1`
    FOREIGN KEY (`idRole`)
    REFERENCES `armstrong`.`ADMINS_ROLES` (`idRole`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `armstrong`.`PAYMENTS_VISITS_AUDIT`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `armstrong`.`PAYMENTS_VISITS_AUDIT` (
  `idAudit` INT UNSIGNED NOT NULL AUTO_INCREMENT,
  `action` CHAR(6) NOT NULL,
  `updatedAt` DATETIME NOT NULL,
  `updatedBy` MEDIUMINT UNSIGNED NOT NULL,
  `idPaymentVisit` MEDIUMINT UNSIGNED NOT NULL,
  `price` DECIMAL(9,2) NOT NULL,
  `idGym` TINYINT UNSIGNED NOT NULL,
  PRIMARY KEY (`idAudit`, `idPaymentVisit`, `updatedBy`, `idGym`),
  INDEX `fk_PAYMENTS_VISITS_AUDIT_MEMBERS1_idx` (`updatedBy` ASC) VISIBLE,
  INDEX `fk_PAYMENTS_VISITS_AUDIT_PAYMENTS_VISITS1_idx` (`idPaymentVisit` ASC) VISIBLE,
  INDEX `fk_PAYMENTS_VISITS_AUDIT_GYMS1_idx` (`idGym` ASC) VISIBLE,
  CONSTRAINT `fk_PAYMENTS_VISITS_AUDIT_MEMBERS1`
    FOREIGN KEY (`updatedBy`)
    REFERENCES `armstrong`.`MEMBERS` (`idMember`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_PAYMENTS_VISITS_AUDIT_PAYMENTS_VISITS1`
    FOREIGN KEY (`idPaymentVisit`)
    REFERENCES `armstrong`.`PAYMENTS_VISITS` (`idPaymentVisit`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_PAYMENTS_VISITS_AUDIT_GYMS1`
    FOREIGN KEY (`idGym`)
    REFERENCES `armstrong`.`GYMS` (`idGym`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `armstrong`.`ADMINS_ROLES_AUDIT`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `armstrong`.`ADMINS_ROLES_AUDIT` (
  `idAudit` INT UNSIGNED NOT NULL AUTO_INCREMENT,
  `action` CHAR(6) NOT NULL,
  `updatedAt` DATETIME NOT NULL,
  `updatedBy` MEDIUMINT UNSIGNED NOT NULL,
  `idRole` TINYINT UNSIGNED NOT NULL,
  `name` VARCHAR(45) NOT NULL,
  PRIMARY KEY (`idAudit`, `updatedBy`, `idRole`),
  INDEX `fk_ADMINS_ROLES_AUDIT_MEMBERS1_idx` (`updatedBy` ASC) INVISIBLE,
  INDEX `fk_ADMINS_ROLES_AUDIT_ADMINS_ROLES1_idx` (`idRole` ASC) INVISIBLE,
  CONSTRAINT `fk_ADMINS_ROLES_AUDIT_MEMBERS1`
    FOREIGN KEY (`updatedBy`)
    REFERENCES `armstrong`.`MEMBERS` (`idMember`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_ADMINS_ROLES_AUDIT_ADMINS_ROLES1`
    FOREIGN KEY (`idRole`)
    REFERENCES `armstrong`.`ADMINS_ROLES` (`idRole`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `armstrong`.`DEBTS_AUDIT`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `armstrong`.`DEBTS_AUDIT` (
  `idAudit` INT UNSIGNED NOT NULL AUTO_INCREMENT,
  `action` CHAR(6) NOT NULL,
  `updatedAt` DATETIME NOT NULL,
  `updatedBy` MEDIUMINT UNSIGNED NOT NULL,
  `idDebt` MEDIUMINT UNSIGNED NOT NULL,
  `owe` DECIMAL(9,2) NOT NULL,
  `paidOut` DECIMAL(9,2) NOT NULL,
  `debtStatus` TINYINT NOT NULL,
  `idMember` MEDIUMINT UNSIGNED NOT NULL,
  PRIMARY KEY (`idAudit`, `updatedBy`, `idDebt`, `idMember`),
  INDEX `fk_DEBTS_AUDIT_MEMBERS1_idx` (`updatedBy` ASC) VISIBLE,
  INDEX `fk_DEBTS_AUDIT_DEBTS1_idx` (`idDebt` ASC) VISIBLE,
  INDEX `fk_DEBTS_AUDIT_MEMBERS2_idx` (`idMember` ASC) VISIBLE,
  CONSTRAINT `fk_DEBTS_AUDIT_MEMBERS1`
    FOREIGN KEY (`updatedBy`)
    REFERENCES `armstrong`.`MEMBERS` (`idMember`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_DEBTS_AUDIT_DEBTS1`
    FOREIGN KEY (`idDebt`)
    REFERENCES `armstrong`.`DEBTS` (`idDebt`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_DEBTS_AUDIT_MEMBERS2`
    FOREIGN KEY (`idMember`)
    REFERENCES `armstrong`.`MEMBERS` (`idMember`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `armstrong`.`PRODUCTS`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `armstrong`.`PRODUCTS` (
  `idProduct` SMALLINT UNSIGNED NOT NULL AUTO_INCREMENT,
  `name` VARCHAR(60) NOT NULL,
  `price` DECIMAL(7,2) NOT NULL,
  `createdAt` DATETIME NOT NULL DEFAULT NOW(),
  `createdBy` MEDIUMINT UNSIGNED NOT NULL,
  `updatedAt` DATETIME NULL,
  `updatedBy` MEDIUMINT UNSIGNED NULL,
  `flag` TINYINT UNSIGNED NOT NULL DEFAULT 1,
  PRIMARY KEY (`idProduct`, `createdBy`),
  INDEX `fk_PRODUCTS_MEMBERS1_idx` (`createdBy` ASC) VISIBLE,
  INDEX `fk_PRODUCTS_MEMBERS2_idx` (`updatedBy` ASC) VISIBLE,
  CONSTRAINT `fk_PRODUCTS_MEMBERS1`
    FOREIGN KEY (`createdBy`)
    REFERENCES `armstrong`.`MEMBERS` (`idMember`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_PRODUCTS_MEMBERS2`
    FOREIGN KEY (`updatedBy`)
    REFERENCES `armstrong`.`MEMBERS` (`idMember`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `armstrong`.`PRODUCTS_AUDIT`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `armstrong`.`PRODUCTS_AUDIT` (
  `idAudit` INT UNSIGNED NOT NULL AUTO_INCREMENT,
  `action` CHAR(6) NOT NULL,
  `updatedAt` DATETIME NOT NULL,
  `updatedBy` MEDIUMINT UNSIGNED NOT NULL,
  `idProduct` SMALLINT UNSIGNED NOT NULL,
  `price` DECIMAL(7,2) NOT NULL,
  `name` VARCHAR(60) NOT NULL,
  PRIMARY KEY (`idAudit`, `updatedBy`, `idProduct`),
  INDEX `fk_PRODUCTS_AUDIT_MEMBERS1_idx` (`updatedBy` ASC) VISIBLE,
  INDEX `fk_PRODUCTS_AUDIT_PRODUCTS1_idx` (`idProduct` ASC) VISIBLE,
  CONSTRAINT `fk_PRODUCTS_AUDIT_MEMBERS1`
    FOREIGN KEY (`updatedBy`)
    REFERENCES `armstrong`.`MEMBERS` (`idMember`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_PRODUCTS_AUDIT_PRODUCTS1`
    FOREIGN KEY (`idProduct`)
    REFERENCES `armstrong`.`PRODUCTS` (`idProduct`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `armstrong`.`PAYMENTS_PRODUCTS`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `armstrong`.`PAYMENTS_PRODUCTS` (
  `idPaymentProduct` SMALLINT UNSIGNED NOT NULL AUTO_INCREMENT,
  `price` DECIMAL(7,2) NOT NULL,
  `idProduct` SMALLINT UNSIGNED NOT NULL,
  `idGym` TINYINT UNSIGNED NOT NULL,
  `createdAt` DATETIME NOT NULL DEFAULT NOW(),
  `createdBy` MEDIUMINT UNSIGNED NOT NULL,
  `updatedAt` DATETIME NULL,
  `updatedBy` MEDIUMINT UNSIGNED NULL,
  `flag` TINYINT UNSIGNED NOT NULL DEFAULT 1,
  PRIMARY KEY (`idPaymentProduct`, `idProduct`, `idGym`, `createdBy`),
  INDEX `fk_PAYMENTS_PRODUCTS_PRODUCTS1_idx` (`idProduct` ASC, `idGym` ASC) VISIBLE,
  INDEX `fk_PAYMENTS_PRODUCTS_MEMBERS1_idx` (`createdBy` ASC) VISIBLE,
  INDEX `fk_PAYMENTS_PRODUCTS_MEMBERS2_idx` (`updatedBy` ASC) VISIBLE,
  CONSTRAINT `fk_PAYMENTS_PRODUCTS_PRODUCTS1`
    FOREIGN KEY (`idProduct`)
    REFERENCES `armstrong`.`PRODUCTS` (`idProduct`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_PAYMENTS_PRODUCTS_MEMBERS1`
    FOREIGN KEY (`createdBy`)
    REFERENCES `armstrong`.`MEMBERS` (`idMember`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_PAYMENTS_PRODUCTS_MEMBERS2`
    FOREIGN KEY (`updatedBy`)
    REFERENCES `armstrong`.`MEMBERS` (`idMember`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `armstrong`.`PAYMENTS_PRODUCTS_AUDIT`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `armstrong`.`PAYMENTS_PRODUCTS_AUDIT` (
  `idAudit` INT UNSIGNED NOT NULL AUTO_INCREMENT,
  `action` CHAR(6) NOT NULL,
  `updatedAt` DATETIME NOT NULL,
  `updatedBy` MEDIUMINT UNSIGNED NOT NULL,
  `idPaymentProduct` SMALLINT UNSIGNED NOT NULL,
  `price` DECIMAL(7,2) NOT NULL,
  `idProduct` SMALLINT UNSIGNED NOT NULL,
  `idGym` TINYINT UNSIGNED NOT NULL,
  PRIMARY KEY (`idAudit`, `updatedBy`, `idPaymentProduct`, `idProduct`, `idGym`),
  INDEX `fk_PAYMENTS_PRODUCTS_AUDIT_MEMBERS1_idx` (`updatedBy` ASC) VISIBLE,
  INDEX `fk_PAYMENTS_PRODUCTS_AUDIT_GYMS1_idx` (`idGym` ASC) VISIBLE,
  INDEX `fk_PAYMENTS_PRODUCTS_AUDIT_PAYMENTS_PRODUCTS1_idx` (`idPaymentProduct` ASC) VISIBLE,
  INDEX `fk_PAYMENTS_PRODUCTS_AUDIT_PRODUCTS1_idx` (`idProduct` ASC) VISIBLE,
  CONSTRAINT `fk_PAYMENTS_PRODUCTS_AUDIT_MEMBERS1`
    FOREIGN KEY (`updatedBy`)
    REFERENCES `armstrong`.`MEMBERS` (`idMember`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_PAYMENTS_PRODUCTS_AUDIT_GYMS1`
    FOREIGN KEY (`idGym`)
    REFERENCES `armstrong`.`GYMS` (`idGym`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_PAYMENTS_PRODUCTS_AUDIT_PAYMENTS_PRODUCTS1`
    FOREIGN KEY (`idPaymentProduct`)
    REFERENCES `armstrong`.`PAYMENTS_PRODUCTS` (`idPaymentProduct`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_PAYMENTS_PRODUCTS_AUDIT_PRODUCTS1`
    FOREIGN KEY (`idProduct`)
    REFERENCES `armstrong`.`PRODUCTS` (`idProduct`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;

USE `armstrong`;

DELIMITER $$
USE `armstrong`$$
CREATE DEFINER = CURRENT_USER TRIGGER `armstrong`.`MEMBERS_BEFORE_UPDATE` BEFORE UPDATE ON `MEMBERS` FOR EACH ROW
BEGIN
	IF(OLD.updatedBy IS NULL) THEN
		INSERT INTO MEMBERS_AUDIT(action, updatedAt, updatedBy, idMember, name, lastName, gender, notes, access, idGym) VALUE (
			'CREATE',
            OLD.createdAt,
            OLD.createdBy,
            OLD.idMember,
            OLD.name,
            OLD.lastName,
            OLD.gender,
            OLD.notes,
            OLD.access,
            OLD.idGym
		);
    END IF;
	IF (NEW.flag = 0) THEN
        SET @action = 'DELETE';
    ELSE
        SET @action = 'UPDATE';
    END IF;
    SET NEW.updatedAt = NOW();
    INSERT INTO MEMBERS_AUDIT(action, updatedAt, updatedBy, idMember, name, lastName, gender, notes, access, idGym) VALUE (
		@action,
		NEW.updatedAt,
		NEW.updatedBy,
		NEW.idMember,
		NEW.name,
		NEW.lastName,
		NEW.gender,
		NEW.notes,
		NEW.access,
		NEW.idGym
	);
END$$

USE `armstrong`$$
CREATE DEFINER = CURRENT_USER TRIGGER `armstrong`.`MEMBERSHIPS_BEFORE_UPDATE` BEFORE UPDATE ON `MEMBERSHIPS` FOR EACH ROW
BEGIN
	IF(OLD.updatedBy IS NULL) THEN
    INSERT INTO MEMBERSHIPS_AUDIT(action, updatedAt, updatedBy, idMembership, name, price, monthly) VALUE (
		'CREATE',
        OLD.createdAt,
        OLD.createdBy,
        OLD.idMembership,
        OLD.name,
        OLD.price,
        OLD.monthly
	);
    END IF;
	IF (NEW.flag = 0) THEN
        SET @action = 'DELETE';
    ELSE
        SET @action = 'UPDATE';
    END IF;
	SET NEW.updatedAt = NOW();
    INSERT INTO MEMBERSHIPS_AUDIT(action, updatedAt, updatedBy, idMembership, name, price, monthly) VALUE (
		@action,
        NEW.updatedAt,
        NEW.updatedBy,
        NEW.idMembership,
        NEW.name,
        NEW.price,
        NEW.monthly
	);
END$$

USE `armstrong`$$
CREATE DEFINER = CURRENT_USER TRIGGER `armstrong`.`ADMINS_ROLES_BEFORE_UPDATE` BEFORE UPDATE ON `ADMINS_ROLES` FOR EACH ROW
BEGIN
	IF(OLD.updatedBy IS NULL) THEN
		INSERT INTO ADMINS_ROLES_AUDIT(action, updatedAt, updatedBy, idRole, name) VALUE (
			'CREATE',
            OLD.createdAt,
            OLD.createdBy,
            OLD.idRole,
            OLD.name
		);
    END IF;
	IF (NEW.flag = 0) THEN
        SET @action = 'DELETE';
    ELSE
        SET @action = 'UPDATE';
    END IF;
    SET NEW.updatedAt = NOW();
    INSERT INTO ADMINS_ROLES_AUDIT(action, updatedAt, updatedBy, idRole, name) VALUE (
			'CREATE',
            NEW.createdAt,
            NEW.createdBy,
            NEW.idRole,
            NEW.name
		);
END$$

USE `armstrong`$$
CREATE DEFINER = CURRENT_USER TRIGGER `armstrong`.`PAYMENTS_MEMBERSHIPS_BEFORE_UPDATE` BEFORE UPDATE ON `PAYMENTS_MEMBERSHIPS` FOR EACH ROW
BEGIN
	IF (OLD.updatedBy IS NULL) THEN
		INSERT INTO PAYMENTS_MEMBERSHIPS_AUDIT(action, updatedAt, updatedBy, idPaymentMembership, months, price, startDateTime, endDateTime, firstMembership, idGym, idMember, idMembership) VALUE (
			'CREATE',
			OLD.createdAt,
			OLD.createdBy,
			OLD.idPaymentMembership,
			OLD.months,
			OLD.price,
			OLD.startDateTime,
			OLD.endDateTime,
            OLD.firstMembership,
			OLD.idGym,
			OLD.idMember,
			OLD.idMembership
		);
    END IF;
	IF (NEW.flag = 0) THEN
		SET @action = 'DELETE';
	ELSE
		SET @action = 'UPDATE';
	END IF;
    SET NEW.updatedAt = NOW();
	INSERT INTO PAYMENTS_MEMBERSHIPS_AUDIT(action, updatedAt, updatedBy, idPaymentMembership, months, price, startDateTime, endDateTime, firstMembership, idGym, idMember, idMembership) VALUE (
		@action,
		NEW.updatedAt,
		NEW.updatedBy,
		NEW.idPaymentMembership,
		NEW.months,
		NEW.price,
		NEW.startDateTime,
		NEW.endDateTime,
        NEW.firstMembership,
		NEW.idGym,
		NEW.idMember,
		NEW.idMembership
	);
END$$

USE `armstrong`$$
CREATE DEFINER = CURRENT_USER TRIGGER `armstrong`.`DEBTS_BEFORE_UPDATE` BEFORE UPDATE ON `DEBTS` FOR EACH ROW
BEGIN
    IF(OLD.updatedBy IS NULL) THEN
		INSERT INTO DEBTS_AUDIT(action, updatedAt, updatedBy, idDebt, owe, paidOut, debtStatus, idMember) VALUE (
			'CREATE',
            OLD.createdAt,
            OLD.createdBy,
            OLD.idDebt,
            OLD.owe,
            OLD.paidOut,
            OLD.debtStatus,
            OLD.idMember
		);
    END IF;
	IF (NEW.flag = 0) THEN
        SET @action = 'DELETE';
    ELSE
        SET @action = 'UPDATE';
    END IF;
    SET NEW.paidOut = OLD.paidOut + NEW.paidOut;
    SET NEW.updatedAt = NOW();
    INSERT INTO DEBTS_AUDIT(action, updatedAt, updatedBy, idDebt, owe, paidOut, debtStatus, idMember) VALUE (
			@action,
            NEW.updatedAt,
            NEW.updatedBy,
            NEW.idDebt,
            NEW.owe,
            NEW.paidOut,
            NEW.debtStatus,
            NEW.idMember
		);
END$$

USE `armstrong`$$
CREATE DEFINER = CURRENT_USER TRIGGER `armstrong`.`ADMINS_BEFORE_UPDATE` BEFORE UPDATE ON `ADMINS` FOR EACH ROW
BEGIN
	IF(OLD.updatedBy IS NULL) THEN
		INSERT INTO ADMINS_AUDIT(action, updatedAt, updatedBy, idAdmin, username, password, idRole) VALUE (
			'CREATE',
            OLD.createdAt,
            OLD.createdBy,
            OLD.idAdmin,
            OLD.username,
            OLD.password,
            OLD.idRole
		);
    END IF;
	IF (NEW.flag = 0) THEN
        SET @action = 'DELETE';
    ELSE
        SET @action = 'UPDATE';
    END IF;
    SET NEW.updatedAt = NOW();
    INSERT INTO ADMINS_AUDIT(action, updatedAt, updatedBy, idAdmin, username, password, idRole) VALUE (
		@action,
		NEW.updatedAt,
		NEW.updatedBy,
        NEW.idAdmin,
		NEW.username,
		NEW.password,
		NEW.idRole
	);
END$$

USE `armstrong`$$
CREATE DEFINER = CURRENT_USER TRIGGER `armstrong`.`PAYMENTS_VISITS_BEFORE_UPDATE` BEFORE UPDATE ON `PAYMENTS_VISITS` FOR EACH ROW
BEGIN
	IF(OLD.updatedBy IS NULL) THEN
    INSERT INTO PAYMENTS_VISITS_AUDIT(action, updatedAt, updatedBy, idPaymentVisit, price, idGym) VALUE (
		'CREATE',
        OLD.createdAt,
        OLD.createdBy,
        OLD.idPaymentVisit,
        OLD.price,
        OLD.idGym
	);
    END IF;
	IF (NEW.flag = 0) THEN
        SET @action = 'DELETE';
    ELSE
        SET @action = 'UPDATE';
    END IF;
	SET NEW.updatedAt = NOW();
    INSERT INTO PAYMENTS_VISITS_AUDIT(action, updatedAt, updatedBy, idPaymentVisit, price, idGym) VALUE (
		@action,
        NEW.updatedAt,
        NEW.updatedBy,
        NEW.idPaymentVisit,
        NEW.price,
        NEW.idGym
	);
END$$

USE `armstrong`$$
CREATE DEFINER = CURRENT_USER TRIGGER `armstrong`.`PRODUCTS_BEFORE_UPDATE` BEFORE UPDATE ON `PRODUCTS` FOR EACH ROW
BEGIN
	IF (OLD.updatedBy IS NULL) THEN
		INSERT INTO PRODUCTS_AUDIT(action, updatedAt, updatedBy, idProduct, name, price) VALUE (
			'CREATE',
			OLD.createdAt,
			OLD.createdBy,
			OLD.idProduct,
            OLD.name,
			OLD.price
		);
    END IF;
	IF (NEW.flag = 0) THEN
		SET @action = 'DELETE';
	ELSE
		SET @action = 'UPDATE';
	END IF;
    SET NEW.updatedAt = NOW();
	INSERT INTO PRODUCTS_AUDIT(action, updatedAt, updatedBy, idProduct, name, price) VALUE (
		@action,
		NEW.updatedAt,
		NEW.updatedBy,
		NEW.idProduct,
        NEW.name,
		NEW.price
	);
END$$

USE `armstrong`$$
CREATE DEFINER = CURRENT_USER TRIGGER `armstrong`.`PAYMENTS_PRODUCTS_BEFORE_UPDATE` BEFORE UPDATE ON `PAYMENTS_PRODUCTS` FOR EACH ROW
BEGIN
	IF (OLD.updatedBy IS NULL) THEN
		INSERT INTO PAYMENTS_PRODUCTS_AUDIT(action, updatedAt, updatedBy, idPaymentProduct, price, idProduct, idGym) VALUE (
			'CREATE',
			OLD.createdAt,
			OLD.createdBy,
			OLD.idPaymentProduct,
			OLD.price,
            OLD.idProduct,
            OLD.idGym
		);
    END IF;
	IF (NEW.flag = 0) THEN
		SET @action = 'DELETE';
	ELSE
		SET @action = 'UPDATE';
	END IF;
    SET NEW.updatedAt = NOW();
	INSERT INTO PAYMENTS_PRODUCTS_AUDIT(action, updatedAt, updatedBy, idPaymentProduct, price, idProduct, idGym) VALUE (
		@action,
		NEW.updatedAt,
		NEW.updatedBy,
		NEW.idPaymentProduct,
		NEW.price,
        NEW.idProduct,
        NEW.idGym
	);
END$$


DELIMITER ;

-- -----------------------------------------------------
-- Data for table `armstrong`.`GYMS`
-- -----------------------------------------------------
START TRANSACTION;
USE `armstrong`;
INSERT INTO `armstrong`.`GYMS` (`idGym`, `name`, `address`, `createdAt`, `createdBy`, `flag`) VALUES (1, 'Gimnasio', 'S/A', DEFAULT, 1, DEFAULT);

COMMIT;


-- -----------------------------------------------------
-- Data for table `armstrong`.`MEMBERS`
-- -----------------------------------------------------
START TRANSACTION;
USE `armstrong`;
INSERT INTO `armstrong`.`MEMBERS` (`idMember`, `name`, `lastName`, `gender`, `notes`, `access`, `idGym`, `createdAt`, `createdBy`, `updatedAt`, `updatedBy`, `flag`) VALUES (1, 'Sistema', '', 'Hombre', NULL, DEFAULT, 1, DEFAULT, 1, NULL, NULL, DEFAULT);

COMMIT;


-- -----------------------------------------------------
-- Data for table `armstrong`.`MEMBERSHIPS`
-- -----------------------------------------------------
START TRANSACTION;
USE `armstrong`;
INSERT INTO `armstrong`.`MEMBERSHIPS` (`idMembership`, `name`, `price`, `monthly`, `createdAt`, `createdBy`, `updatedAt`, `updatedBy`, `flag`) VALUES (DEFAULT, 'Cortesía', 0, 1, DEFAULT, 1, NULL, NULL, DEFAULT);
INSERT INTO `armstrong`.`MEMBERSHIPS` (`idMembership`, `name`, `price`, `monthly`, `createdAt`, `createdBy`, `updatedAt`, `updatedBy`, `flag`) VALUES (DEFAULT, 'Estudiante', 240, 1, DEFAULT, 1, NULL, NULL, DEFAULT);
INSERT INTO `armstrong`.`MEMBERSHIPS` (`idMembership`, `name`, `price`, `monthly`, `createdAt`, `createdBy`, `updatedAt`, `updatedBy`, `flag`) VALUES (DEFAULT, 'Normal', 280, 1, DEFAULT, 1, NULL, NULL, DEFAULT);
INSERT INTO `armstrong`.`MEMBERSHIPS` (`idMembership`, `name`, `price`, `monthly`, `createdAt`, `createdBy`, `updatedAt`, `updatedBy`, `flag`) VALUES (DEFAULT, 'Caminadora', 320, 1, DEFAULT, 1, NULL, NULL, DEFAULT);
INSERT INTO `armstrong`.`MEMBERSHIPS` (`idMembership`, `name`, `price`, `monthly`, `createdAt`, `createdBy`, `updatedAt`, `updatedBy`, `flag`) VALUES (DEFAULT, 'Sin caminadora', 50, 0, DEFAULT, 1, NULL, NULL, DEFAULT);
INSERT INTO `armstrong`.`MEMBERSHIPS` (`idMembership`, `name`, `price`, `monthly`, `createdAt`, `createdBy`, `updatedAt`, `updatedBy`, `flag`) VALUES (DEFAULT, 'Con caminadora', 70, 0, DEFAULT, 1, NULL, NULL, DEFAULT);

COMMIT;


-- -----------------------------------------------------
-- Data for table `armstrong`.`ADMINS_ROLES`
-- -----------------------------------------------------
START TRANSACTION;
USE `armstrong`;
INSERT INTO `armstrong`.`ADMINS_ROLES` (`idRole`, `name`, `createdAt`, `createdBy`, `updatedAt`, `updatedBy`, `flag`) VALUES (1, 'Programador', DEFAULT, DEFAULT, NULL, NULL, DEFAULT);
INSERT INTO `armstrong`.`ADMINS_ROLES` (`idRole`, `name`, `createdAt`, `createdBy`, `updatedAt`, `updatedBy`, `flag`) VALUES (2, 'Dueño', DEFAULT, DEFAULT, NULL, NULL, DEFAULT);
INSERT INTO `armstrong`.`ADMINS_ROLES` (`idRole`, `name`, `createdAt`, `createdBy`, `updatedAt`, `updatedBy`, `flag`) VALUES (3, 'Secretario', DEFAULT, DEFAULT, NULL, NULL, DEFAULT);
INSERT INTO `armstrong`.`ADMINS_ROLES` (`idRole`, `name`, `createdAt`, `createdBy`, `updatedAt`, `updatedBy`, `flag`) VALUES (4, 'Entrenador', DEFAULT, DEFAULT, NULL, NULL, DEFAULT);
INSERT INTO `armstrong`.`ADMINS_ROLES` (`idRole`, `name`, `createdAt`, `createdBy`, `updatedAt`, `updatedBy`, `flag`) VALUES (5, 'Conserje', DEFAULT, DEFAULT, NULL, NULL, DEFAULT);

COMMIT;


-- -----------------------------------------------------
-- Data for table `armstrong`.`ADMINS`
-- -----------------------------------------------------
START TRANSACTION;
USE `armstrong`;
INSERT INTO `armstrong`.`ADMINS` (`idAdmin`, `username`, `password`, `idRole`, `createdAt`, `createdBy`, `updatedAt`, `updatedBy`, `flag`) VALUES (1, 'sistema', '276617c468aeb13e74bcb6e54273858f200e8091e657c46886a5d1325779aeca', 1, DEFAULT, 1, NULL, NULL, DEFAULT);

COMMIT;


SET SQL_MODE=@OLD_SQL_MODE;
SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS;
SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS;
